.TH "EmulatePcodeOp" 3 "Sun Apr 14 2019" "decompile" \" -*- nroff -*-
.ad l
.nh
.SH NAME
EmulatePcodeOp \- Emulation based on (existing) PcodeOps and Varnodes\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <emulateutil\&.hh>\fP
.PP
Inherits \fBEmulate\fP\&.
.PP
Inherited by \fBEmulateFunction\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBEmulatePcodeOp\fP (\fBArchitecture\fP *g)"
.br
.RI "\fBConstructor\fP\&. "
.ti -1c
.RI "void \fBsetCurrentOp\fP (\fBPcodeOp\fP *op)"
.br
.RI "Establish the current \fBPcodeOp\fP being emulated\&. "
.ti -1c
.RI "virtual \fBAddress\fP \fBgetExecuteAddress\fP (void) const"
.br
.RI "Get the address of the current instruction being executed\&. "
.ti -1c
.RI "virtual void \fBsetVarnodeValue\fP (\fBVarnode\fP *vn, \fBuintb\fP val)=0"
.br
.RI "Given a specific \fBVarnode\fP, set the given value for it in the current machine state\&. "
.ti -1c
.RI "virtual \fBuintb\fP \fBgetVarnodeValue\fP (\fBVarnode\fP *vn) const =0"
.br
.RI "Given a specific \fBVarnode\fP, retrieve the current value for it from the machine state\&. "
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual \fBuintb\fP \fBgetLoadImageValue\fP (\fBAddrSpace\fP *spc, \fBuintb\fP offset, int4 sz) const"
.br
.RI "Pull a value from the load-image given a specific address\&. "
.ti -1c
.RI "virtual void \fBexecuteUnary\fP (void)"
.br
.RI "Execute a unary arithmetic/logical operation\&. "
.ti -1c
.RI "virtual void \fBexecuteBinary\fP (void)"
.br
.RI "Execute a binary arithmetic/logical operation\&. "
.ti -1c
.RI "virtual void \fBexecuteLoad\fP (void)"
.br
.RI "Standard behavior for a p-code LOAD\&. "
.ti -1c
.RI "virtual void \fBexecuteStore\fP (void)"
.br
.RI "Standard behavior for a p-code STORE\&. "
.ti -1c
.RI "virtual bool \fBexecuteCbranch\fP (void)"
.br
.RI "Check if the conditional of a CBRANCH is \fBtrue\fP\&. "
.ti -1c
.RI "virtual void \fBexecuteMultiequal\fP (void)"
.br
.RI "Standard behavior for a MULTIEQUAL (phi-node) "
.ti -1c
.RI "virtual void \fBexecuteIndirect\fP (void)"
.br
.RI "Standard behavior for an INDIRECT op\&. "
.ti -1c
.RI "virtual void \fBexecuteSegmentOp\fP (void)"
.br
.RI "Behavior for a SEGMENTOP\&. "
.ti -1c
.RI "virtual void \fBexecuteCpoolRef\fP (void)"
.br
.RI "Standard behavior for a CPOOLREF (constant pool reference) op\&. "
.ti -1c
.RI "virtual void \fBexecuteNew\fP (void)"
.br
.RI "Standard behavior for (low-level) NEW op\&. "
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fBArchitecture\fP * \fBglb\fP"
.br
.RI "The underlying \fBArchitecture\fP for the program being emulated\&. "
.ti -1c
.RI "\fBPcodeOp\fP * \fBcurrentOp\fP"
.br
.RI "Current \fBPcodeOp\fP being executed\&. "
.ti -1c
.RI "\fBPcodeOp\fP * \fBlastOp\fP"
.br
.RI "Last \fBPcodeOp\fP that was executed\&. "
.in -1c
.SH "Detailed Description"
.PP 
Emulation based on (existing) PcodeOps and Varnodes\&. 

This is still an abstract class\&. It does most of the work of emulating p-code using \fBPcodeOp\fP and \fBVarnode\fP objects (as opposed to \fBPcodeOpRaw\fP and \fBVarnodeData\fP)\&. This class leaves implementation of control-flow to the derived class\&. This class implements most operations by going through new virtual methods:
.IP "\(bu" 2
\fBgetVarnodeValue()\fP
.IP "\(bu" 2
\fBsetVarnodeValue()\fP
.IP "\(bu" 2
\fBgetLoadImageValue()\fP
.PP
.PP
The default \fBexecuteLoad()\fP implementation pulls values from the underlying \fBLoadImage\fP object\&. The following p-code ops are provided \fINULL\fP implementations, as some tasks don't need hard emulation of them:
.IP "\(bu" 2
STORE
.IP "\(bu" 2
CPOOLREF
.IP "\(bu" 2
NEW 
.PP

.PP
Definition at line 41 of file emulateutil\&.hh\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "EmulatePcodeOp::EmulatePcodeOp (\fBArchitecture\fP * g)"

.PP
\fBConstructor\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIg\fP is the \fBArchitecture\fP providing the \fBLoadImage\fP 
.RE
.PP

.PP
Definition at line 20 of file emulateutil\&.cc\&.
.SH "Member Function Documentation"
.PP 
.SS "void EmulatePcodeOp::executeBinary (void)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Execute a binary arithmetic/logical operation\&. 
.PP
Implements \fBEmulate\fP\&.
.PP
Definition at line 54 of file emulateutil\&.cc\&.
.SS "bool EmulatePcodeOp::executeCbranch (void)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Check if the conditional of a CBRANCH is \fBtrue\fP\&. This routine only checks if the condition for a p-code CBRANCH is true\&. It does \fInot\fP perform the actual branch\&. 
.PP
\fBReturns:\fP
.RS 4
the boolean state indicated by the condition 
.RE
.PP

.PP
Implements \fBEmulate\fP\&.
.PP
Definition at line 85 of file emulateutil\&.cc\&.
.SS "void EmulatePcodeOp::executeCpoolRef (void)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Standard behavior for a CPOOLREF (constant pool reference) op\&. 
.PP
Implements \fBEmulate\fP\&.
.PP
Definition at line 136 of file emulateutil\&.cc\&.
.SS "void EmulatePcodeOp::executeIndirect (void)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Standard behavior for an INDIRECT op\&. 
.PP
Implements \fBEmulate\fP\&.
.PP
Definition at line 110 of file emulateutil\&.cc\&.
.SS "void EmulatePcodeOp::executeLoad (void)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Standard behavior for a p-code LOAD\&. 
.PP
Implements \fBEmulate\fP\&.
.PP
Definition at line 64 of file emulateutil\&.cc\&.
.SS "void EmulatePcodeOp::executeMultiequal (void)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Standard behavior for a MULTIEQUAL (phi-node) 
.PP
Implements \fBEmulate\fP\&.
.PP
Definition at line 94 of file emulateutil\&.cc\&.
.SS "void EmulatePcodeOp::executeNew (void)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Standard behavior for (low-level) NEW op\&. 
.PP
Implements \fBEmulate\fP\&.
.PP
Definition at line 142 of file emulateutil\&.cc\&.
.SS "void EmulatePcodeOp::executeSegmentOp (void)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Behavior for a SEGMENTOP\&. 
.PP
Implements \fBEmulate\fP\&.
.PP
Definition at line 120 of file emulateutil\&.cc\&.
.SS "void EmulatePcodeOp::executeStore (void)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Standard behavior for a p-code STORE\&. 
.PP
Implements \fBEmulate\fP\&.
.PP
Definition at line 76 of file emulateutil\&.cc\&.
.SS "void EmulatePcodeOp::executeUnary (void)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Execute a unary arithmetic/logical operation\&. 
.PP
Implements \fBEmulate\fP\&.
.PP
Definition at line 45 of file emulateutil\&.cc\&.
.SS "virtual \fBAddress\fP EmulatePcodeOp::getExecuteAddress (void) const\fC [inline]\fP, \fC [virtual]\fP"

.PP
Get the address of the current instruction being executed\&. 
.PP
Implements \fBEmulate\fP\&.
.PP
Definition at line 80 of file emulateutil\&.hh\&.
.SS "\fBuintb\fP EmulatePcodeOp::getLoadImageValue (\fBAddrSpace\fP * spc, \fBuintb\fP offset, int4 sz) const\fC [protected]\fP, \fC [virtual]\fP"

.PP
Pull a value from the load-image given a specific address\&. A contiguous chunk of memory is pulled from the load-image and returned as a constant value, respecting the endianess of the address space\&. The default implementation of this method pulls the value directly from the \fBLoadImage\fP object\&. 
.PP
\fBParameters:\fP
.RS 4
\fIspc\fP is the address space to pull the value from 
.br
\fIoffset\fP is the starting address offset (from within the space) to pull the value from 
.br
\fIsz\fP is the number of bytes to pull from memory 
.RE
.PP
\fBReturns:\fP
.RS 4
indicated bytes arranged as a constant value 
.RE
.PP

.PP
Definition at line 28 of file emulateutil\&.cc\&.
.SS "virtual \fBuintb\fP EmulatePcodeOp::getVarnodeValue (\fBVarnode\fP * vn) const\fC [pure virtual]\fP"

.PP
Given a specific \fBVarnode\fP, retrieve the current value for it from the machine state\&. This is the placeholder internal operation for obtaining a \fBVarnode\fP value during emulation\&. The value is \fIloaded\fP using the \fBVarnode\fP as the \fIaddress\fP and \fIstorage\fP \fIsize\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIvn\fP is the specific \fBVarnode\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
the corresponding value from the machine state 
.RE
.PP

.PP
Implemented in \fBEmulateFunction\fP\&.
.SS "void EmulatePcodeOp::setCurrentOp (\fBPcodeOp\fP * op)\fC [inline]\fP"

.PP
Establish the current \fBPcodeOp\fP being emulated\&. 
.PP
\fBParameters:\fP
.RS 4
\fIop\fP is the \fBPcodeOp\fP that will next be executed via \fBexecuteCurrentOp()\fP 
.RE
.PP

.PP
Definition at line 79 of file emulateutil\&.hh\&.
.SS "virtual void EmulatePcodeOp::setVarnodeValue (\fBVarnode\fP * vn, \fBuintb\fP val)\fC [pure virtual]\fP"

.PP
Given a specific \fBVarnode\fP, set the given value for it in the current machine state\&. This is the placeholder internal operation for setting a \fBVarnode\fP value during emulation\&. The value is \fIstored\fP using the \fBVarnode\fP as the \fIaddress\fP and \fIstorage\fP \fIsize\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIvn\fP is the specific \fBVarnode\fP 
.br
\fIval\fP is the constant value to store 
.RE
.PP

.PP
Implemented in \fBEmulateFunction\fP\&.
.SH "Member Data Documentation"
.PP 
.SS "\fBPcodeOp\fP* EmulatePcodeOp::currentOp\fC [protected]\fP"

.PP
Current \fBPcodeOp\fP being executed\&. 
.PP
Definition at line 44 of file emulateutil\&.hh\&.
.SS "\fBArchitecture\fP* EmulatePcodeOp::glb\fC [protected]\fP"

.PP
The underlying \fBArchitecture\fP for the program being emulated\&. 
.PP
Definition at line 43 of file emulateutil\&.hh\&.
.SS "\fBPcodeOp\fP* EmulatePcodeOp::lastOp\fC [protected]\fP"

.PP
Last \fBPcodeOp\fP that was executed\&. 
.PP
Definition at line 45 of file emulateutil\&.hh\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for decompile from the source code\&.
