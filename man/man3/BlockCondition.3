.TH "BlockCondition" 3 "Sun Apr 14 2019" "decompile" \" -*- nroff -*-
.ad l
.nh
.SH NAME
BlockCondition \- Two conditional blocks combined into one conditional using BOOL_AND or BOOL_OR\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <block\&.hh>\fP
.PP
Inherits \fBBlockGraph\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBBlockCondition\fP (\fBOpCode\fP c)"
.br
.RI "Construct given the boolean operation\&. "
.ti -1c
.RI "\fBOpCode\fP \fBgetOpcode\fP (void) const"
.br
.RI "Get the boolean operation\&. "
.ti -1c
.RI "virtual \fBblock_type\fP \fBgetType\fP (void) const"
.br
.RI "Get the \fBFlowBlock\fP type of \fBthis\fP\&. "
.ti -1c
.RI "virtual void \fBscopeBreak\fP (int4 curexit, int4 curloopexit)"
.br
.RI "Mark unstructured edges that should be \fIbreaks\fP\&. "
.ti -1c
.RI "virtual void \fBprintHeader\fP (ostream &s) const"
.br
.RI "Print a simple description of \fBthis\fP to stream\&. "
.ti -1c
.RI "virtual void \fBemit\fP (\fBPrintLanguage\fP *lng) const"
.br
.RI "Emit the instructions in \fBthis\fP \fBFlowBlock\fP as structured code\&. "
.ti -1c
.RI "virtual bool \fBnegateCondition\fP (bool toporbottom)"
.br
.RI "Flip the condition computed by \fBthis\fP\&. "
.ti -1c
.RI "virtual \fBFlowBlock\fP * \fBgetSplitPoint\fP (void)"
.br
.RI "Get the leaf splitting block\&. "
.ti -1c
.RI "virtual int4 \fBflipInPlaceTest\fP (vector< \fBPcodeOp\fP * > &fliplist) const"
.br
.RI "Test normalizing the conditional branch in \fBthis\fP\&. "
.ti -1c
.RI "virtual void \fBflipInPlaceExecute\fP (void)"
.br
.RI "Perform the flip to normalize conditional branch executed by \fBthis\fP block\&. "
.ti -1c
.RI "virtual \fBPcodeOp\fP * \fBlastOp\fP (void) const"
.br
.RI "Get the last \fBPcodeOp\fP executed by \fBthis\fP \fBFlowBlock\fP\&. "
.ti -1c
.RI "virtual bool \fBisComplex\fP (void) const"
.br
.RI "Is \fBthis\fP too complex to be a condition (\fBBlockCondition\fP) "
.ti -1c
.RI "virtual \fBFlowBlock\fP * \fBnextFlowAfter\fP (const \fBFlowBlock\fP *bl) const"
.br
.RI "Get the leaf \fBFlowBlock\fP that will execute after the given \fBFlowBlock\fP\&. "
.ti -1c
.RI "virtual void \fBsaveXmlHeader\fP (ostream &s) const"
.br
.RI "Save basic information as XML attributes\&. "
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
Two conditional blocks combined into one conditional using BOOL_AND or BOOL_OR\&. 

This class is used to construct full conditional expressions\&. An instance glues together two components, each with two outgoing edges\&. Of the four edges, 1 must go between the two components, and 2 must go to the same exit block, so there will be exactly 2 distinct exit blocks in total\&. The new condition can be interpreted as either:
.IP "\(bu" 2
If condition one \fBand\fP condition two, goto exit 0, otherwise goto exit 1\&.
.IP "\(bu" 2
If condition one \fBor\fP condition two, goto exit 1, otherwise goto exit 0\&.
.PP
.PP
depending on the boolean operation setting for the condition 
.PP
Definition at line 513 of file block\&.hh\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "BlockCondition::BlockCondition (\fBOpCode\fP c)\fC [inline]\fP"

.PP
Construct given the boolean operation\&. 
.PP
Definition at line 516 of file block\&.hh\&.
.SH "Member Function Documentation"
.PP 
.SS "virtual void BlockCondition::emit (\fBPrintLanguage\fP * lng) const\fC [inline]\fP, \fC [virtual]\fP"

.PP
Emit the instructions in \fBthis\fP \fBFlowBlock\fP as structured code\&. This is the main entry point, at the control-flow level, for printing structured code\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlng\fP is the \fBPrintLanguage\fP that provides details of the high-level language being printed 
.RE
.PP

.PP
Reimplemented from \fBBlockGraph\fP\&.
.PP
Definition at line 521 of file block\&.hh\&.
.SS "void BlockCondition::flipInPlaceExecute (void)\fC [virtual]\fP"

.PP
Perform the flip to normalize conditional branch executed by \fBthis\fP block\&. This reverses the outgoing edge order in the right basic blocks, but does not modify the instructions directly\&. 
.PP
Reimplemented from \fBFlowBlock\fP\&.
.PP
Definition at line 2695 of file block\&.cc\&.
.SS "int4 BlockCondition::flipInPlaceTest (vector< \fBPcodeOp\fP * > & fliplist) const\fC [virtual]\fP"

.PP
Test normalizing the conditional branch in \fBthis\fP\&. Find the set of \fBPcodeOp\fP objects that need to be adjusted to flip the condition \fBthis\fP \fBFlowBlock\fP calculates\&.
.PP
Return:
.IP "\(bu" 2
0 if the flip would normalize the condition
.IP "\(bu" 2
1 if the flip doesn't affect normalization of the condition
.IP "\(bu" 2
2 if the flip produces an unnormalized condition 
.PP
\fBParameters:\fP
.RS 4
\fIfliplist\fP will contain the PcodeOps that need to be adjusted 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if the condition will be normalized, 1 or 2 otherwise 
.RE
.PP

.PP

.PP
Reimplemented from \fBFlowBlock\fP\&.
.PP
Definition at line 2677 of file block\&.cc\&.
.SS "\fBOpCode\fP BlockCondition::getOpcode (void) const\fC [inline]\fP"

.PP
Get the boolean operation\&. 
.PP
Definition at line 517 of file block\&.hh\&.
.SS "virtual \fBFlowBlock\fP* BlockCondition::getSplitPoint (void)\fC [inline]\fP, \fC [virtual]\fP"

.PP
Get the leaf splitting block\&. If \fBthis\fP block ends with a conditional branch, return the deepest component block that performs the split\&. This component needs to be able to perform \fBflipInPlaceTest()\fP and \fBflipInPlaceExecute()\fP 
.PP
\fBReturns:\fP
.RS 4
the component \fBFlowBlock\fP or NULL if this doesn't end in a conditional branch 
.RE
.PP

.PP
Reimplemented from \fBFlowBlock\fP\&.
.PP
Definition at line 523 of file block\&.hh\&.
.SS "virtual \fBblock_type\fP BlockCondition::getType (void) const\fC [inline]\fP, \fC [virtual]\fP"

.PP
Get the \fBFlowBlock\fP type of \fBthis\fP\&. 
.PP
Reimplemented from \fBBlockGraph\fP\&.
.PP
Definition at line 518 of file block\&.hh\&.
.SS "virtual bool BlockCondition::isComplex (void) const\fC [inline]\fP, \fC [virtual]\fP"

.PP
Is \fBthis\fP too complex to be a condition (\fBBlockCondition\fP) 
.PP
Reimplemented from \fBFlowBlock\fP\&.
.PP
Definition at line 527 of file block\&.hh\&.
.SS "\fBPcodeOp\fP * BlockCondition::lastOp (void) const\fC [virtual]\fP"

.PP
Get the last \fBPcodeOp\fP executed by \fBthis\fP \fBFlowBlock\fP\&. 
.PP
Reimplemented from \fBFlowBlock\fP\&.
.PP
Definition at line 2703 of file block\&.cc\&.
.SS "bool BlockCondition::negateCondition (bool toporbottom)\fC [virtual]\fP"

.PP
Flip the condition computed by \fBthis\fP\&. Flip the order of outgoing edges (at least)\&. This should also affect the original op causing the condition\&. Note: we don't have to flip at all levels of the hierarchy only at the top and at the bottom 
.PP
\fBParameters:\fP
.RS 4
\fItoporbottom\fP is \fBtrue\fP if \fBthis\fP is the top outermost block of the hierarchy getting negated 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBtrue\fP if a change was made to data-flow 
.RE
.PP

.PP
Reimplemented from \fBFlowBlock\fP\&.
.PP
Definition at line 2710 of file block\&.cc\&.
.SS "\fBFlowBlock\fP * BlockCondition::nextFlowAfter (const \fBFlowBlock\fP * bl) const\fC [virtual]\fP"

.PP
Get the leaf \fBFlowBlock\fP that will execute after the given \fBFlowBlock\fP\&. Within the hierarchy of \fBthis\fP \fBFlowBlock\fP, assume the given \fBFlowBlock\fP will fall-thru in its execution at some point\&. Return the first leaf block (\fBBlockBasic\fP or \fBBlockCopy\fP) that will execute after the given \fBFlowBlock\fP completes, assuming this is a unique block\&. 
.PP
\fBParameters:\fP
.RS 4
\fIbl\fP is the given \fBFlowBlock\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
the next \fBFlowBlock\fP to execute or NULL 
.RE
.PP

.PP
Reimplemented from \fBBlockGraph\fP\&.
.PP
Definition at line 2740 of file block\&.cc\&.
.SS "void BlockCondition::printHeader (ostream & s) const\fC [virtual]\fP"

.PP
Print a simple description of \fBthis\fP to stream\&. Only print a header for \fBthis\fP single block 
.PP
\fBParameters:\fP
.RS 4
\fIs\fP is the output stream 
.RE
.PP

.PP
Reimplemented from \fBFlowBlock\fP\&.
.PP
Definition at line 2728 of file block\&.cc\&.
.SS "void BlockCondition::saveXmlHeader (ostream & s) const\fC [virtual]\fP"

.PP
Save basic information as XML attributes\&. 
.PP
\fBParameters:\fP
.RS 4
\fIs\fP is the output stream 
.RE
.PP

.PP
Reimplemented from \fBFlowBlock\fP\&.
.PP
Definition at line 2746 of file block\&.cc\&.
.SS "void BlockCondition::scopeBreak (int4 curexit, int4 curloopexit)\fC [virtual]\fP"

.PP
Mark unstructured edges that should be \fIbreaks\fP\&. 
.PP
Reimplemented from \fBBlockGraph\fP\&.
.PP
Definition at line 2721 of file block\&.cc\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for decompile from the source code\&.
