.TH "sleigh_a_p_iemulate" 3 "Sun Apr 14 2019" "decompile" \" -*- nroff -*-
.ad l
.nh
.SH NAME
sleigh_a_p_iemulate \- The SLEIGH Emulator 

.SH "Overview"
.PP
\fBSLEIGH\fP provides a framework for emulating the processors which have a specification written for them\&. The key classes in this framework are:
.PP
\fBKey\fP \fBClasses\fP 
.IP "\(bu" 2
\fBMemoryState\fP
.IP "\(bu" 2
\fBMemoryBank\fP
.IP "\(bu" 2
\fBBreakTable\fP
.IP "\(bu" 2
\fBBreakCallBack\fP
.IP "\(bu" 2
\fBEmulate\fP
.IP "\(bu" 2
\fBEmulatePcodeCache\fP
.PP
.PP
The \fBMemoryState\fP object holds the representation of registers and memory during emulation\&. It understands the address spaces defined in the \fBSLEIGH\fP specification and how data is encoded in these spaces\&. It also knows any register names defined by the specification, so these can be used to set or query the state of these registers naturally\&.
.PP
The emulation framework can be tailored to a particular environment by creating \fBbreakpoint\fP objects, which derive off the \fBBreakCallBack\fP interface\&. These can be used to create callbacks during emulation that have full access to the memory state and the emulator, so any action can be accomplished\&. The breakpoint callbacks can be designed to either augment or replace the instruction at a particular address, or the callback can be used to implement the action of a user-defined pcode op\&. The \fBBreakCallBack\fP objects are managed by the \fBBreakTable\fP object, which takes care of invoking the callback at the appropriate time\&.
.PP
The \fBEmulate\fP object serves as a basic execution engine\&. Its main method is \fBEmulate::executeCurrentOp()\fP which executes a single pcode operation on the memory state\&. Methods exist for querying and setting the current execution address and examining the pcode op being executed\&.
.PP
The main implementation of the \fBEmulate\fP interface is the \fBEmulatePcodeCache\fP object\&. It uses SLEIGH to translate machine instructions as they are executed\&. The currently executing instruction is translated into a cached sequence of pcode operations\&. Additional methods allow this entire sequence to be inspected, and there is another stepping function which allows the emulator to be stepped through an entire machine instruction at a time\&. The single pcode stepping methods are of course still available and the two methods can be used together without conflict\&.
.SH "Building a Memory State"
.PP
Assuming the SLEIGH \fBTranslate\fP object and the \fBLoadImage\fP object have already been built (see \fBThe Basic SLEIGH Interface\fP), the only required step left before instantiating an emulator is to create a \fBMemoryState\fP object\&. The \fBMemoryState\fP object can be instantiated simply by passing the constructor the \fBTranslate\fP object, but before it will work properly, you need to register individual \fBMemoryBank\fP objects with it, for each address space that might get used by the emulator\&.
.PP
A \fBMemoryBank\fP is a representation of data stored in a single address space There are some choices for the type of \fBMemoryBank\fP associated with an address space\&. A \fBMemoryImage\fP is a read-only memory bank that gets its data from a \fBLoadImage\fP\&. In order to make this writeable, or to create a writeable memory bank which starts with its bytes initialized to zero, you can use a \fBMemoryHashOverlay\fP or a \fBMemoryPageOverlay\fP\&.
.PP
A \fBMemoryHashOverlay\fP overlays some other memory bank, such as a \fBMemoryImage\fP\&. If you read from a location that hasn't been written to directly before, you get the data in the underlying memory bank\&. But if you write to this overlay, the value is stored in a hash table, and subsequent reads will return this value\&. Internally, the hashtable stores values in a \fIpreferred\fP wordsize only on aligned addresses, but this is irrelevant to the interface\&. Unaligned requests are split up and handled transparently\&.
.PP
A \fBMemoryPageOverlay\fP overlays another memory bank as well\&. But it implements writes to the bank by caching memory \fIpages\fP\&. Any write creates an aligned page to hold the new data\&. The class takes care of loading and filling in pages as needed\&.
.PP
Here is an example of instantiating a \fBMemoryState\fP and registering memory banks for a \fIram\fP space which is initialized with the load image\&. The \fIram\fP space is implemented with the \fBMemoryPageOverlay\fP, and the \fIregister\fP space and the \fItemporary\fP space are implemented using the \fBMemoryHashOverlay\fP\&.
.PP
.PP
.nf
 void setupMemoryState(Translate &trans,LoadImage &loader) {
   // Set up memory state object
   MemoryImage loadmemory(trans\&.getDefaultSpace(),8,4096,&loader);
   MemoryPageOverlay ramstate(trans\&.getDefaultSpace(),8,4096,&loadmemory);
   MemoryHashOverlay registerstate(trans\&.getSpaceByName("register"),8,4096,4096,(MemoryBank *)0);
   MemoryHashOverlay tmpstate(trans\&.getUniqueSpace(),8,4096,4096,(MemoryBank *)0);

   MemoryState memstate(&trans);   // Instantiate the memory state object
   memstate\&.setMemoryBank(&ramstate);
   memstate\&.setMemoryBank(&registerstate);
   memstate\&.setMemoryBank(&tmpstate);
}
.fi
.PP
.PP
All the memory bank constructors need a preferred wordsize, which is most relevant to the hashtable implementation, and a page size, which is most relevant to the page implementation\&. The hash overlays need an additional initializer specifying how big the hashtable should be\&. The null pointers passed in, in place of a real memory bank, indicate that the memory bank is initialized with all zeroes\&. Once the memory banks are instantiated, they are registered with the memory state via the \fBMemoryState::setMemoryBank()\fP method\&.
.SH "Breakpoints"
.PP
In order to provide behavior within the emulator beyond just what the core instruction emulation provides, the framework supports \fBbreakpoint\fP classes\&. A breakpoint is created by deriving a class from the \fBBreakCallBack\fP class and overriding either \fBBreakCallBack::addressCallback()\fP or \fBBreakCallBack::pcodeCallback()\fP\&. Here is an example of a breakpoint that implements a standard C library \fIputs\fP call an the x86 architecture\&. When the breakpoint is invoked, a call to \fIputs\fP has just been made, so the stack pointer is pointing to the return address and the next 4 bytes on the stack are a pointer to the string being passed in\&.
.PP
.PP
.nf
class PutsCallBack : public BreakCallBack {
public:
  virtual bool addressCallback(const Address &addr);
};

bool PutsCallBack::addressCallback(const Address &addr)

{
  MemoryState *mem = emulate->getMemoryState();
  uint1 buffer[256];
  uint4 esp = mem->getValue("ESP");
  AddrSpace *ram = mem->getTranslate()->getSpaceByName("ram");

  uint4 param1 = mem->getValue(ram,esp+4,4);
  mem->getChunk(buffer,ram,param1,255);

  cout << (char *)&buffer << endl;

  uint4 returnaddr = mem->getValue(ram,esp,4);
  mem->setValue("ESP",esp+8);
  emulate->setExecuteAddress(Address(ram,returnaddr));

  return true;            // This replaces the indicated instruction
}
.fi
.PP
.PP
Notice that the callback retrieves the value of the stack pointer by name\&. Using this value, the string pointer is retrieved, then the data for the actual string is retrieved\&. After dumping the string to standard out, the return address is recovered and the \fIreturn\fP instruction is emulated by explicitly setting the next execution address to be the return value\&.
.SH "Running the Emulator"
.PP
Here is an example of instantiating an \fBEmulatePcodeCache\fP object\&. A breakpoint is also instantiated and registered with the \fBBreakTable\fP\&.
.PP
.PP
.nf
\&.\&.\&.
Sleigh trans(&loader,&context);    // Instantiate the translator
\&.\&.\&.
MemoryState memstate(&trans);      // Instantiate the memory state
\&.\&.\&.
BreakTableCallBack breaktable(&trans);  // Instantiate a breakpoint table
EmulatePcodeCache emulator(&trans,&memstate,&breaktable);  // Instantiate the emulator

// Set up the initial stack pointer
memstate\&.setValue("ESP",0xbffffffc);
emulator\&.setExecuteAddress(Address(trans\&.getDefaultSpace(),0x1D00114));  // Initial execution address

PutsCallBack putscallback;
breaktable\&.registerAddressCallback(Address(trans\&.getDefaultSpace(),0x1D00130),&putscallback);

AssemblyRaw assememit;
for(;;) {
  Address addr = emulator\&.getExecuteAddress();
  trans\&.printAssembly(assememit,addr);
  emulator\&.executeInstruction();
}
.fi
.PP
.PP
Notice how the initial stack pointer and initial execute address is set up\&. The breakpoint is registered with the \fBBreakTable\fP, giving it a specific address\&. The executeInstruction method is called inside the loop, to actually run the emulator\&. Notice that a disassembly of each instruction is printed after each step of the emulator\&.
.PP
Other information can be examined from within this execution loop or in other tailored breakpoints\&. In particular, the Emulate::getCurrentOp() method can be used to retrieve the an instance of the currently executing pcode operation\&. From this starting point, you can examine the low-level objects:
.IP "\(bu" 2
\fBPcodeOpRaw\fP and
.IP "\(bu" 2
\fBVarnodeData\fP 
.PP

