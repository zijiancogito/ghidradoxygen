.TH "ToOpEdge" 3 "Sun Apr 14 2019" "decompile" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ToOpEdge \- An edge between a \fBVarnode\fP and a \fBPcodeOp\fP\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <dynamic\&.hh>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBToOpEdge\fP (const \fBPcodeOp\fP *o, int4 s)"
.br
.RI "\fBConstructor\fP\&. "
.ti -1c
.RI "const \fBPcodeOp\fP * \fBgetOp\fP (void) const"
.br
.RI "Get the \fBPcodeOp\fP defining the edge\&. "
.ti -1c
.RI "int4 \fBgetSlot\fP (void) const"
.br
.RI "Get the slot of the starting \fBVarnode\fP\&. "
.ti -1c
.RI "bool \fBoperator<\fP (const \fBToOpEdge\fP &op2) const"
.br
.RI "Compare two edges based on \fBPcodeOp\fP\&. "
.ti -1c
.RI "uint4 \fBhash\fP (uint4 reg) const"
.br
.RI "Hash \fBthis\fP edge into an accumulator\&. "
.in -1c
.SH "Detailed Description"
.PP 
An edge between a \fBVarnode\fP and a \fBPcodeOp\fP\&. 

A \fBDynamicHash\fP is defined on a sub-graph of the data-flow, and this defines an edge in the sub-graph\&. The edge can either be from an input \fBVarnode\fP to the \fBPcodeOp\fP that reads it, or from a \fBPcodeOp\fP to the \fBVarnode\fP it defines\&. 
.PP
Definition at line 30 of file dynamic\&.hh\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "ToOpEdge::ToOpEdge (const \fBPcodeOp\fP * o, int4 s)\fC [inline]\fP"

.PP
\fBConstructor\fP\&. 
.PP
Definition at line 34 of file dynamic\&.hh\&.
.SH "Member Function Documentation"
.PP 
.SS "const \fBPcodeOp\fP* ToOpEdge::getOp (void) const\fC [inline]\fP"

.PP
Get the \fBPcodeOp\fP defining the edge\&. 
.PP
Definition at line 35 of file dynamic\&.hh\&.
.SS "int4 ToOpEdge::getSlot (void) const\fC [inline]\fP"

.PP
Get the slot of the starting \fBVarnode\fP\&. 
.PP
Definition at line 36 of file dynamic\&.hh\&.
.SS "uint4 ToOpEdge::hash (uint4 reg) const"

.PP
Hash \fBthis\fP edge into an accumulator\&. The hash accumulates:
.IP "\(bu" 2
the \fBVarnode\fP slot
.IP "\(bu" 2
the address of the \fBPcodeOp\fP
.IP "\(bu" 2
the op-code of the \fBPcodeOp\fP
.PP
.PP
The op-codes are translated so that the hash is invariant under common variants\&. 
.PP
\fBParameters:\fP
.RS 4
\fIreg\fP is the incoming hash accumulator value 
.RE
.PP
\fBReturns:\fP
.RS 4
the accumulator value with \fBthis\fP edge folded in 
.RE
.PP

.PP
Definition at line 89 of file dynamic\&.cc\&.
.SS "bool ToOpEdge::operator< (const \fBToOpEdge\fP & op2) const"

.PP
Compare two edges based on \fBPcodeOp\fP\&. These edges are sorted to provide consistency to the hash The sort is based on the \fBPcodeOp\fP sequence number first, then the \fBVarnode\fP slot 
.PP
\fBParameters:\fP
.RS 4
\fIop2\fP is the edge to compare \fBthis\fP to 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBtrue\fP if \fBthis\fP should be ordered before the other edge 
.RE
.PP

.PP
Definition at line 66 of file dynamic\&.cc\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for decompile from the source code\&.
