.TH "ActionInferTypes" 3 "Sun Apr 14 2019" "decompile" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ActionInferTypes \- Infer and propagate data-types\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <coreaction\&.hh>\fP
.PP
Inherits \fBAction\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBActionInferTypes\fP (const string &g)"
.br
.RI "\fBConstructor\fP\&. "
.ti -1c
.RI "virtual void \fBreset\fP (\fBFuncdata\fP &data)"
.br
.RI "Reset the \fBAction\fP for a new function\&. "
.ti -1c
.RI "virtual \fBAction\fP * \fBclone\fP (const \fBActionGroupList\fP &grouplist) const"
.br
.RI "Clone the \fBAction\fP\&. "
.ti -1c
.RI "virtual int4 \fBapply\fP (\fBFuncdata\fP &data)"
.br
.RI "Make a single attempt to apply \fBthis\fP \fBAction\fP\&. "
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
Infer and propagate data-types\&. 

Atomic data-types are ordered from \fImost\fP specified to \fIleast\fP specified\&. This is extended rescursively to an ordering on composite data-types via \fBDatatype::typeOrder()\fP\&. A local data-type is calculated for each \fBVarnode\fP by looking at the data-types expected by the PcodeOps it is directly involved in (as input or output)\&. Every \fBVarnode\fP has 1 chance to propagate its information throughout the graph along COPY,LOAD,STORE,ADD,MULTIEQUAL,and INDIRECT edges\&. The propagation is done with a depth first search along propagating edges\&. If the propagated data-type is the same, less than, or if the varnode had been propagated through already, that branch is trimmed\&. Every edge can theoretically get traversed once, i\&.e\&. the search allows the type to propagate through a looping edge, but immediately truncates\&. This is probably quadratic in the worst case, if each \fBVarnode\fP has a higher type and propagates it to the entire graph\&. But it is linear in practice, because there are generally only two or three levels of type, so only one or two Varnodes are likely to propagate widely within a component, and the others get truncated immediately\&. An initial sort on the data-type level of the Varnodes, so that the highest-level types are propagated first, would probably fix the worst-case, but this seems unnecessary\&. Complications: TYPE_SPACEBASE is a problem because we have to make sure that it doesn't propagate\&. Also, offsets off of pointers to TYPE_SPACEBASE look up the data-type in the local map\&. Then ActionRestructure uses data-type information recovered by this algorithm to reconstruct the local map\&. This causes a feedback loop which allows type information recovered about mapped Varnodes to be propagated to pointer Varnodes which point to the mapped object\&. Unfortunately under rare circumstances, this feedback-loop does not converge for some reason\&. Rather than hunt this down, I've put an arbitrary iteration limit on the data-type propagation algorithm, which reports a warning if the limit is reached and then aborts additional propagation so that decompiling can terminate\&. 
.PP
Definition at line 878 of file coreaction\&.hh\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "ActionInferTypes::ActionInferTypes (const string & g)\fC [inline]\fP"

.PP
\fBConstructor\fP\&. 
.PP
Definition at line 893 of file coreaction\&.hh\&.
.SH "Member Function Documentation"
.PP 
.SS "int4 ActionInferTypes::apply (\fBFuncdata\fP & data)\fC [virtual]\fP"

.PP
Make a single attempt to apply \fBthis\fP \fBAction\fP\&. This is the main entry point for applying changes to a function that are specific to \fBthis\fP \fBAction\fP\&. The method can inspect whatever it wants to decide if the \fBAction\fP does or does not apply\&. Changes are indicated by incrementing the \fBcount\fP field\&. 
.PP
\fBParameters:\fP
.RS 4
\fIdata\fP is the function to inspect/modify 
.RE
.PP
\fBReturns:\fP
.RS 4
0 for a complete application, -1 for a partial completion (due to breakpoint) 
.RE
.PP

.PP
Implements \fBAction\fP\&.
.PP
Definition at line 4328 of file coreaction\&.cc\&.
.SS "virtual \fBAction\fP* ActionInferTypes::clone (const \fBActionGroupList\fP & grouplist) const\fC [inline]\fP, \fC [virtual]\fP"

.PP
Clone the \fBAction\fP\&. If \fBthis\fP \fBAction\fP is a member of one of the groups in the grouplist, this returns a clone of the \fBAction\fP, otherwise NULL is returned\&. 
.PP
\fBParameters:\fP
.RS 4
\fIgrouplist\fP is the list of groups being cloned 
.RE
.PP
\fBReturns:\fP
.RS 4
the cloned \fBAction\fP or NULL 
.RE
.PP

.PP
Implements \fBAction\fP\&.
.PP
Definition at line 895 of file coreaction\&.hh\&.
.SS "virtual void ActionInferTypes::reset (\fBFuncdata\fP & data)\fC [inline]\fP, \fC [virtual]\fP"

.PP
Reset the \fBAction\fP for a new function\&. 
.PP
\fBParameters:\fP
.RS 4
\fIdata\fP is the new function \fBthis\fP \fBAction\fP may affect 
.RE
.PP

.PP
Reimplemented from \fBAction\fP\&.
.PP
Definition at line 894 of file coreaction\&.hh\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for decompile from the source code\&.
