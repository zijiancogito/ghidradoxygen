.TH "EmulateMemory" 3 "Sun Apr 14 2019" "decompile" \" -*- nroff -*-
.ad l
.nh
.SH NAME
EmulateMemory \- An abstract \fBEmulate\fP class using a \fBMemoryState\fP object as the backing machine state\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <emulate\&.hh>\fP
.PP
Inherits \fBEmulate\fP\&.
.PP
Inherited by \fBEmulatePcodeCache\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBEmulateMemory\fP (\fBMemoryState\fP *mem)"
.br
.RI "Construct given a memory state\&. "
.ti -1c
.RI "\fBMemoryState\fP * \fBgetMemoryState\fP (void) const"
.br
.RI "Get the emulator's memory state\&. "
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual void \fBexecuteUnary\fP (void)"
.br
.RI "Execute a unary arithmetic/logical operation\&. "
.ti -1c
.RI "virtual void \fBexecuteBinary\fP (void)"
.br
.RI "Execute a binary arithmetic/logical operation\&. "
.ti -1c
.RI "virtual void \fBexecuteLoad\fP (void)"
.br
.RI "Standard behavior for a p-code LOAD\&. "
.ti -1c
.RI "virtual void \fBexecuteStore\fP (void)"
.br
.RI "Standard behavior for a p-code STORE\&. "
.ti -1c
.RI "virtual void \fBexecuteBranch\fP (void)"
.br
.RI "Standard behavior for a BRANCH\&. "
.ti -1c
.RI "virtual bool \fBexecuteCbranch\fP (void)"
.br
.RI "Check if the conditional of a CBRANCH is \fBtrue\fP\&. "
.ti -1c
.RI "virtual void \fBexecuteBranchind\fP (void)"
.br
.RI "Standard behavior for a BRANCHIND\&. "
.ti -1c
.RI "virtual void \fBexecuteCall\fP (void)"
.br
.RI "Standard behavior for a p-code CALL\&. "
.ti -1c
.RI "virtual void \fBexecuteCallind\fP (void)"
.br
.RI "Standard behavior for a CALLIND\&. "
.ti -1c
.RI "virtual void \fBexecuteCallother\fP (void)"
.br
.RI "Standard behavior for a user-defined p-code op\&. "
.ti -1c
.RI "virtual void \fBexecuteMultiequal\fP (void)"
.br
.RI "Standard behavior for a MULTIEQUAL (phi-node) "
.ti -1c
.RI "virtual void \fBexecuteIndirect\fP (void)"
.br
.RI "Standard behavior for an INDIRECT op\&. "
.ti -1c
.RI "virtual void \fBexecuteSegmentOp\fP (void)"
.br
.RI "Behavior for a SEGMENTOP\&. "
.ti -1c
.RI "virtual void \fBexecuteCpoolRef\fP (void)"
.br
.RI "Standard behavior for a CPOOLREF (constant pool reference) op\&. "
.ti -1c
.RI "virtual void \fBexecuteNew\fP (void)"
.br
.RI "Standard behavior for (low-level) NEW op\&. "
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fBMemoryState\fP * \fBmemstate\fP"
.br
.RI "The memory state of the emulator\&. "
.ti -1c
.RI "\fBPcodeOpRaw\fP * \fBcurrentOp\fP"
.br
.RI "Current op to execute\&. "
.in -1c
.SH "Detailed Description"
.PP 
An abstract \fBEmulate\fP class using a \fBMemoryState\fP object as the backing machine state\&. 

Most p-code operations are implemented using the \fBMemoryState\fP to fetch and store values\&. Control-flow is implemented partially in that \fBsetExecuteAddress()\fP is called to indicate which instruction is being executed\&. The derived class must provide
.IP "\(bu" 2
\fBfallthruOp()\fP
.IP "\(bu" 2
\fBsetExecuteAddress()\fP
.IP "\(bu" 2
\fBgetExecuteAddress()\fP
.PP
.PP
The following p-code operations are stubbed out and will throw an exception: CALLOTHER, MULTIEQUAL, INDIRECT, CPOOLREF, SEGMENTOP, and NEW\&. Of course the derived class can override these\&. 
.PP
Definition at line 243 of file emulate\&.hh\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "EmulateMemory::EmulateMemory (\fBMemoryState\fP * mem)\fC [inline]\fP"

.PP
Construct given a memory state\&. 
.PP
Definition at line 264 of file emulate\&.hh\&.
.SH "Member Function Documentation"
.PP 
.SS "void EmulateMemory::executeBinary (void)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Execute a binary arithmetic/logical operation\&. 
.PP
Implements \fBEmulate\fP\&.
.PP
Definition at line 225 of file emulate\&.cc\&.
.SS "void EmulateMemory::executeBranch (void)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Standard behavior for a BRANCH\&. This routine performs a standard p-code BRANCH operation on the memory state\&. This same routine is used for CBRANCH operations if the condition has evaluated to \fBtrue\fP\&. 
.PP
Implements \fBEmulate\fP\&.
.PP
Reimplemented in \fBEmulatePcodeCache\fP\&.
.PP
Definition at line 257 of file emulate\&.cc\&.
.SS "void EmulateMemory::executeBranchind (void)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Standard behavior for a BRANCHIND\&. 
.PP
Implements \fBEmulate\fP\&.
.PP
Definition at line 270 of file emulate\&.cc\&.
.SS "void EmulateMemory::executeCall (void)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Standard behavior for a p-code CALL\&. 
.PP
Implements \fBEmulate\fP\&.
.PP
Definition at line 277 of file emulate\&.cc\&.
.SS "void EmulateMemory::executeCallind (void)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Standard behavior for a CALLIND\&. 
.PP
Implements \fBEmulate\fP\&.
.PP
Definition at line 283 of file emulate\&.cc\&.
.SS "void EmulateMemory::executeCallother (void)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Standard behavior for a user-defined p-code op\&. 
.PP
Implements \fBEmulate\fP\&.
.PP
Reimplemented in \fBEmulatePcodeCache\fP\&.
.PP
Definition at line 290 of file emulate\&.cc\&.
.SS "bool EmulateMemory::executeCbranch (void)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Check if the conditional of a CBRANCH is \fBtrue\fP\&. This routine only checks if the condition for a p-code CBRANCH is true\&. It does \fInot\fP perform the actual branch\&. 
.PP
\fBReturns:\fP
.RS 4
the boolean state indicated by the condition 
.RE
.PP

.PP
Implements \fBEmulate\fP\&.
.PP
Definition at line 263 of file emulate\&.cc\&.
.SS "void EmulateMemory::executeCpoolRef (void)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Standard behavior for a CPOOLREF (constant pool reference) op\&. 
.PP
Implements \fBEmulate\fP\&.
.PP
Definition at line 314 of file emulate\&.cc\&.
.SS "void EmulateMemory::executeIndirect (void)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Standard behavior for an INDIRECT op\&. 
.PP
Implements \fBEmulate\fP\&.
.PP
Definition at line 302 of file emulate\&.cc\&.
.SS "void EmulateMemory::executeLoad (void)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Standard behavior for a p-code LOAD\&. 
.PP
Implements \fBEmulate\fP\&.
.PP
Definition at line 235 of file emulate\&.cc\&.
.SS "void EmulateMemory::executeMultiequal (void)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Standard behavior for a MULTIEQUAL (phi-node) 
.PP
Implements \fBEmulate\fP\&.
.PP
Definition at line 296 of file emulate\&.cc\&.
.SS "void EmulateMemory::executeNew (void)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Standard behavior for (low-level) NEW op\&. 
.PP
Implements \fBEmulate\fP\&.
.PP
Definition at line 320 of file emulate\&.cc\&.
.SS "void EmulateMemory::executeSegmentOp (void)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Behavior for a SEGMENTOP\&. 
.PP
Implements \fBEmulate\fP\&.
.PP
Definition at line 308 of file emulate\&.cc\&.
.SS "void EmulateMemory::executeStore (void)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Standard behavior for a p-code STORE\&. 
.PP
Implements \fBEmulate\fP\&.
.PP
Definition at line 246 of file emulate\&.cc\&.
.SS "void EmulateMemory::executeUnary (void)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Execute a unary arithmetic/logical operation\&. 
.PP
Implements \fBEmulate\fP\&.
.PP
Definition at line 216 of file emulate\&.cc\&.
.SS "\fBMemoryState\fP * EmulateMemory::getMemoryState (void) const\fC [inline]\fP"

.PP
Get the emulator's memory state\&. 
.PP
\fBReturns:\fP
.RS 4
the memory state object which this emulator uses 
.RE
.PP

.PP
Definition at line 269 of file emulate\&.hh\&.
.SH "Member Data Documentation"
.PP 
.SS "\fBPcodeOpRaw\fP* EmulateMemory::currentOp\fC [protected]\fP"

.PP
Current op to execute\&. 
.PP
Definition at line 246 of file emulate\&.hh\&.
.SS "\fBMemoryState\fP* EmulateMemory::memstate\fC [protected]\fP"

.PP
The memory state of the emulator\&. 
.PP
Definition at line 245 of file emulate\&.hh\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for decompile from the source code\&.
