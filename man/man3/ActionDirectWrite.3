.TH "ActionDirectWrite" 3 "Sun Apr 14 2019" "decompile" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ActionDirectWrite \- Mark Varnodes built out of \fIlegal\fP parameters\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <coreaction\&.hh>\fP
.PP
Inherits \fBAction\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBActionDirectWrite\fP (const string &g, bool prop)"
.br
.RI "\fBConstructor\fP\&. "
.ti -1c
.RI "virtual \fBAction\fP * \fBclone\fP (const \fBActionGroupList\fP &grouplist) const"
.br
.RI "Clone the \fBAction\fP\&. "
.ti -1c
.RI "virtual int4 \fBapply\fP (\fBFuncdata\fP &data)"
.br
.RI "Make a single attempt to apply \fBthis\fP \fBAction\fP\&. "
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
Mark Varnodes built out of \fIlegal\fP parameters\&. 

Label a varnode with the \fBdirectwrite\fP attribute if: that varnode can trace at least part of its data-flow ancestry to legal inputs, where \fBlegal\fP inputs include: globals, spacebase registers, and normal function parameters\&. The directwrite attribute is set on these inputs initially and then propagated to other varnodes through all other ops except CPUI_INDIRECT\&. The attribute propagates through CPUI_INDIRECT depending on the setting of -propagateIndirect-\&. For normal decompilation, propagation through CPUI_INDIRECTs is important for stack and other high-level addrtied variables that need to hold their value over ranges where they are not accessed directly\&. But propagation adds unnecessary clutter for normalization style analysis\&. 
.PP
Definition at line 209 of file coreaction\&.hh\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "ActionDirectWrite::ActionDirectWrite (const string & g, bool prop)\fC [inline]\fP"

.PP
\fBConstructor\fP\&. 
.PP
Definition at line 212 of file coreaction\&.hh\&.
.SH "Member Function Documentation"
.PP 
.SS "int4 ActionDirectWrite::apply (\fBFuncdata\fP & data)\fC [virtual]\fP"

.PP
Make a single attempt to apply \fBthis\fP \fBAction\fP\&. This is the main entry point for applying changes to a function that are specific to \fBthis\fP \fBAction\fP\&. The method can inspect whatever it wants to decide if the \fBAction\fP does or does not apply\&. Changes are indicated by incrementing the \fBcount\fP field\&. 
.PP
\fBParameters:\fP
.RS 4
\fIdata\fP is the function to inspect/modify 
.RE
.PP
\fBReturns:\fP
.RS 4
0 for a complete application, -1 for a partial completion (due to breakpoint) 
.RE
.PP

.PP
Implements \fBAction\fP\&.
.PP
Definition at line 1070 of file coreaction\&.cc\&.
.SS "virtual \fBAction\fP* ActionDirectWrite::clone (const \fBActionGroupList\fP & grouplist) const\fC [inline]\fP, \fC [virtual]\fP"

.PP
Clone the \fBAction\fP\&. If \fBthis\fP \fBAction\fP is a member of one of the groups in the grouplist, this returns a clone of the \fBAction\fP, otherwise NULL is returned\&. 
.PP
\fBParameters:\fP
.RS 4
\fIgrouplist\fP is the list of groups being cloned 
.RE
.PP
\fBReturns:\fP
.RS 4
the cloned \fBAction\fP or NULL 
.RE
.PP

.PP
Implements \fBAction\fP\&.
.PP
Definition at line 213 of file coreaction\&.hh\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for decompile from the source code\&.
